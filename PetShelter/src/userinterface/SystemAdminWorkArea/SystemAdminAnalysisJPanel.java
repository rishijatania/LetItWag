/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.WorkQueue.PetAdoptionWorkRequest;
import Business.WorkQueue.PetHealthCheckUpRequest;
import Business.WorkQueue.ReportStrayAnimalRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Lakshit S Talreja
 */
public class SystemAdminAnalysisJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem ecosystem;
    
    /**
     * Creates new form SystemAdminAnalysisJPanel
     */
    public SystemAdminAnalysisJPanel(JPanel userProcessContainer,EcoSystem ecosystem) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.ecosystem=ecosystem;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        analysisSplitPane = new javax.swing.JSplitPane();
        topJPanel = new javax.swing.JPanel();
        analysisComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        bottomJPanel = new javax.swing.JPanel();

        analysisSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        topJPanel.setBackground(new java.awt.Color(255, 255, 255));

        analysisComboBox.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        analysisComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Requests Per Enterprise", "Type of Requests Count" }));
        analysisComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analysisComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(226, 153, 0));
        jLabel1.setText("C.H.A.R.T.S");

        jLabel2.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel2.setText("Type of Requests: ");

        backJButton.setBackground(new java.awt.Color(0, 153, 255));
        backJButton.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topJPanelLayout = new javax.swing.GroupLayout(topJPanel);
        topJPanel.setLayout(topJPanelLayout);
        topJPanelLayout.setHorizontalGroup(
            topJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topJPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107)
                .addComponent(jLabel2)
                .addGap(58, 58, 58)
                .addComponent(analysisComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 196, Short.MAX_VALUE)
                .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        topJPanelLayout.setVerticalGroup(
            topJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topJPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(topJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(topJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(analysisComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );

        analysisSplitPane.setTopComponent(topJPanel);

        bottomJPanel.setBackground(new java.awt.Color(255, 255, 255));
        bottomJPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        analysisSplitPane.setRightComponent(bottomJPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(analysisSplitPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(analysisSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void analysisComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analysisComboBoxActionPerformed
        // TODO add your handling code here:
        String analysisRequest = analysisComboBox.getSelectedItem().toString();
        switch(analysisRequest){
            
            case "All Requests Per Enterprise":
                DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                for (Network n : ecosystem.getNetworkList()) {
                    for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                        int count=e.getWorkQueue().getWorkRequestList().size()+
                                (e.getOrganizationDirectory().getOrganizationList().stream()
                                        .mapToInt(org->org.getWorkQueue().getWorkRequestList().size())
                                        .sum());
                        dataset.setValue(count, n.getName(), e.getName());
                    }
                }
                JFreeChart chart = ChartFactory.createBarChart3D("All Requests Per Enterprise", "Enterprise Name", "Count of Requests", dataset, PlotOrientation.VERTICAL, false, true, false);
                CategoryPlot p = chart.getCategoryPlot();
                p.setRangeGridlinePaint(Color.BLACK);
                ChartPanel chartJPanel = new ChartPanel(chart);
                analysisSplitPane.setBottomComponent(chartJPanel);
                break;
                
            case "Type of Requests Count": 
                DefaultPieDataset piedataset = new DefaultPieDataset();
                int reportReq = 0;
                int adoptionReq = 0;
                int petHealthReq =0;
                int otherReq = 0; 
                for (Network n : ecosystem.getNetworkList()) {
                    for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                        for(WorkRequest w: e.getWorkQueue().getWorkRequestList()){
                            if(w instanceof ReportStrayAnimalRequest){
                                reportReq++;
                            }
                            else if(w instanceof PetAdoptionWorkRequest){
                                adoptionReq++;
                            }
                            else if(w instanceof PetHealthCheckUpRequest){
                                petHealthReq++;
                            }else{
                                otherReq++;
                            }
                        }
                        for(Organization org: e.getOrganizationDirectory().getOrganizationList()){
                            for(WorkRequest w: org.getWorkQueue().getWorkRequestList()){
                                if(w instanceof ReportStrayAnimalRequest){
                                    reportReq++;
                                }
                                else if(w instanceof PetAdoptionWorkRequest){
                                    adoptionReq++;
                                }
                                else if(w instanceof PetHealthCheckUpRequest){
                                    petHealthReq++;
                                }else{
                                    otherReq++;
                                }
                            }
                        }
                    }
                }
                piedataset.setValue("Stray Requests", new Integer(reportReq));
                piedataset.setValue("Adoption Requests", new Integer(adoptionReq));
                piedataset.setValue("HealthCheck Requests", new Integer(petHealthReq));
                piedataset.setValue("Other Requests", new Integer(otherReq));
                JFreeChart pieChart = ChartFactory.createPieChart("Type of Requests Count", piedataset, true, true, true);
                PiePlot pie=(PiePlot)pieChart.getPlot();
                ChartPanel piechartJPanel = new ChartPanel(pieChart);
                analysisSplitPane.setBottomComponent(piechartJPanel);
                break;
                
            default: 
                break;
            
        }
        
    }//GEN-LAST:event_analysisComboBoxActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> analysisComboBox;
    private javax.swing.JSplitPane analysisSplitPane;
    private javax.swing.JButton backJButton;
    private javax.swing.JPanel bottomJPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel topJPanel;
    // End of variables declaration//GEN-END:variables
}
